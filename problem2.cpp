/*
 * Problem 2: Even Fibonacci Numbers
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 *
 * Solved: 4/7/18
 *
 */

#include <iostream>

using namespace std;
int fib_num = 0;
int fib_sum = 0;

int IsEven(int num) {
    return num % 2 == 0;
}

int FibOfNthNum(int num) {
    if (num <= 2) { // problem starts with 1, not 0
        return num;
    }
    fib_num = FibOfNthNum(num-1) + FibOfNthNum(num-2);
    return fib_num;
}

int SumOfFibonacci(int max) {
    for (int i = 0; FibOfNthNum(i) < max; i++) {
        if (IsEven(FibOfNthNum(i))) {
            fib_sum += FibOfNthNum(i);
        }
    }
    return fib_sum;
}

int main() {
    cout << "Sum: " << SumOfFibonacci(4000000) << endl;
    return 0;
}
